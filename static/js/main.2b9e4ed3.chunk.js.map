{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAGaA,EAAO,SAACC,GACpB,OACC,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJRC,G,MAAW,SAACR,GAAD,OACvB,qBAAKC,UAAU,YAAf,SAA4BD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAAa,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCDnEM,G,MAAS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OAAO,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCwCrEG,G,wDArCd,aAAe,IAAD,8BACb,gBAiBDH,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IAJD,E,4FAQd,8BAAAI,EAAA,sEAKsBC,MAAM,8CAL5B,cAKKC,EALL,gBAMmBA,EAASC,OAN5B,OAMKC,EANL,OAOCC,KAAKV,SAAS,CAAET,SAAUkB,IAP3B,gD,0EAcA,WAAU,IAAD,EAC0BC,KAAKN,MAA/Bb,EADA,EACAA,SAAUU,EADV,EACUA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACxCA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEjD,OACC,sBAAK9B,UAAU,MAAf,UACC,kDACA,cAAC,EAAD,CAAQW,YAAY,kBAAkBC,aAAce,KAAKf,eACzD,cAAC,EAAD,CAAUJ,SAAUoB,W,GAhCNI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2b9e4ed3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n\treturn (\r\n\t\t<div className=\"card-container\">\r\n\t\t\t<img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n\t\t\t<h2>{props.monster.name}</h2>\r\n\t\t\t<p>{props.monster.email}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => (\r\n\t<div className=\"card-list\">{props.monsters.map((monster) => <Card key={monster.id} monster={monster} />)}</div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const Search = ({ placeholder, handleChange }) => {\r\n\treturn <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />;\r\n};\r\n","import { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { Search } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tasync componentDidMount() {\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\n\t\t// \t.then((response) => response.json())\n\t\t// \t.then((users) => this.setState({ monsters: users }));\n\n\t\tlet response = await fetch('https://jsonplaceholder.typicode.com/users');\n\t\tlet users = await response.json();\n\t\tthis.setState({ monsters: users });\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>MONSTERS ROLODEX</h1>\n\t\t\t\t<Search placeholder=\"Search Monsters\" handleChange={this.handleChange} />\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}